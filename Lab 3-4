--3.1
SELECT  employee_id AS ID,
        first_name|| '_'|| UPPER(SUBSTR(last_name, 1, 2)) AS Name,
        TO_CHAR(hire_date, 'Ddspth')||' of '|| TO_CHAR(hire_date,'Month YYYY HH12:MI:SS AM') AS HIREDATE 
FROM employees
WHERE hire_date >= TO_DATE('01-jan-2003', 'DD-MON-YYYY')
ORDER BY hire_date;

--for check
SELECT TO_CHAR(hire_date, 'ddth "of" Month YYYY')
FROM employees

--3.2
SELECT last_name, salary,
    CASE TRUNC(salary / 2000, 0)
        WHEN 0 THEN 0.00
        WHEN 1 THEN 0.09
        WHEN 2 THEN 0.20
        WHEN 3 THEN 0.30
        WHEN 4 THEN 0.40
        WHEN 5 THEN 0.42
        WHEN 6 THEN 0.44
        ELSE 0.45
    END  TAX_RATE
FROM employees
WHERE department_id = 80;

--3.3
SELECT DISTINCT e.employee_id,j.department_id, COUNT(j.employee_id )OVER (PARTITION BY j.employee_id) AS CHANGE_JOB
FROM JOB_HISTORY j , employees e
WHERE e.employee_id = j.employee_id
ORDER BY e.employee_id ASC;

--cannot--
--select DISTINCT e.employee_id,j.department_id, 
--(select COUNT(employee_id) from JOB_HISTORY where employee_id = '101') AS JC
--from JOB_HISTORY j , employees e
--where e.employee_id=j.employee_id
--order by e.employee_id ASC;

--select DISTINCT e.employee_id,j.department_id, (select COUNT(employee_id) from JOB_HISTORY) AS JC
--from JOB_HISTORY j , employees e
--where e.employee_id=j.employee_id
--order by e.employee_id ASC;


--3.4
WITH TOPSALARY AS (
    SELECT department_id, employee_id AS ID,
        first_name || ' ' || last_name AS Name, salary,
        ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC)
        AS TOPSALARY
    FROM employees )
SELECT department_id, ID, Name, salary
FROM TOPSALARY
WHERE TOPSALARY = 1
ORDER BY department_id;

-- for check
    SELECT department_id, employee_id,
        first_name || ' ' || last_name AS Name, salary,
         ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC)
         AS rank 
    FROM employees 
ORDER BY department_id;


--4.1.1
CREATE TABLE NEW_EMPLOYEES AS
SELECT * FROM EMPLOYEES
WHERE 1 = 0;

ALTER TABLE NEW_EMPLOYEES
ADD CONSTRAINT NEMP_EMP_ID_PK
PRIMARY KEY (EMPLOYEE_ID);

ALTER TABLE NEW_EMPLOYEES
ADD CONSTRAINT NEMP_DEPT_ID_FK
FOREIGN KEY (DEPARTMENT_ID)
REFERENCES DEPARTMENTS (DEPARTMENT_ID);

--CHECK TABLE
DESCRIBE NEW_EMPLOYEES 
DESCRIBE EMPLOYEES 

SELECT *
FROM USER_CONSTRAINTS
WHERE CONSTRAINT_NAME LIKE 'NEMP%';

--4.1.2
INSERT INTO NEW_EMPLOYEES 
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES where manager_id='100';

--4.1.3
CREATE TABLE BACKUP_EMPLOYEES AS
SELECT * FROM EMPLOYEES;

--for check
SELECT * FROM BACKUP_EMPLOYEES

ALTER TABLE BACKUP_EMPLOYEES
ADD CONSTRAINT BEMP_EMP_ID_PK
PRIMARY KEY (EMPLOYEE_ID);

ALTER TABLE BACKUP_EMPLOYEES
ADD CONSTRAINT BEMP_DEPT_ID_FK
FOREIGN KEY (DEPARTMENT_ID)
REFERENCES DEPARTMENTS (DEPARTMENT_ID);

--4.2
CREATE OR REPLACE VIEW EMP_DETAILS AS 
SELECT e.EMPLOYEE_ID AS ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS eName, j.JOB_TITLE, e.MANAGER_ID, 
m.FIRST_NAME || ' ' || m.LAST_NAME AS mName, d.DEPARTMENT_NAME, l.STREET_ADDRESS 
FROM EMPLOYEES e 
LEFT JOIN EMPLOYEES m ON e.MANAGER_ID = m.EMPLOYEE_ID 
LEFT JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
LEFT JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID 
--LEFT JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID  
LEFT JOIN JOBS j ON e.JOB_ID = j.JOB_ID 
ORDER BY e.EMPLOYEE_ID; 

SELECT * FROM EMP_DETAILS;

--for check
--LEFT JOIN REGIONS r ON c.REGION_ID = r.REGION_ID
-- e.MANAGER_ID = m.EMPLOYEE_ID
drop view EMP_DETAILS
select * from  EMP_DETAILS;
SELECT * FROM EMPLOYEES where manager_id='100';

--connot--
SELECT e.EMPLOYEE_ID AS ID, 
       e.FIRST_NAME || ' ' || e.LAST_NAME AS eName, 
       j.JOB_TITLE, 
       e.MANAGER_ID, 
       m.FIRST_NAME || ' ' || m.LAST_NAME AS mName,
       d.DEPARTMENT_NAME, 
       l.STREET_ADDRESS,    
FROM EMPLOYEES e 
JOIN JOBS j ON e.JOB_ID = j.JOB_ID
JOIN EMPLOYEES m ON e.MANAGER_ID = m.EMPLOYEE_ID
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
ORDER BY e.EMPLOYEE_ID;

--CREATE VIEW EMP_DETAILS AS 
SELECT DISTINCT e.EMPLOYEE_ID AS ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS eName, j.JOB_TITLE, e.MANAGER_ID, m.FIRST_NAME || ' ' || m.LAST_NAME AS mName,
d.DEPARTMENT_NAME, l.STREET_ADDRESS
FROM EMPLOYEES e, jobs j ,LOCATIONS l,DEPARTMENTS d,EMPLOYEES m 
where e.JOB_ID=j.JOB_ID 
--AND l.COUNTRY_ID = c.COUNTRY_ID 
AND d.LOCATION_ID=l.LOCATION_ID 
--AND mName>(SELECT m.FIRST_NAME || ' ' || m.LAST_NAME FROM EMPLOYEES e WHERE e.MANAGER_ID = m.EMPLOYEE_ID  )
AND e.DEPARTMENT_ID=d.DEPARTMENT_ID
AND e.EMPLOYEE_ID=m.EMPLOYEE_ID 
ORDER BY e.EMPLOYEE_ID;


--4.3
CREATE VIEW TOP_MANAGERS AS 
SELECT * 
FROM (
    SELECT e.EMPLOYEE_ID AS ID, 
           e.FIRST_NAME || ' ' || e.LAST_NAME AS Manager, 
           COUNT(m.EMPLOYEE_ID) AS MyUnder, 
           AVG(m.SALARY) AS AVGSalary
    FROM EMPLOYEES e
    JOIN EMPLOYEES m ON e.EMPLOYEE_ID = m.manager_id
    GROUP BY e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME
    ORDER BY AVGSalary DESC
)
WHERE ROWNUM <= 3;

SELECT * FROM TOP_MANAGERS ;

--4.4
CREATE SEQUENCE HOUR_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 23
CYCLE
NOCACHE; 
 
--for check
SELECT *
FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'SEQUENCE' AND OBJECT_NAME = 'HOUR_SEQ';

SELECT HOUR_SEQ.CURRVAL C
FROM DUAL ;

SELECT HOUR_SEQ.NEXTVAL N
FROM DUAL ;
