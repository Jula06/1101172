8.1

EXEC DEPT_REPORT(50);

EXEC DEPT_REPORT(270);

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE DEPT_REPORT(p_dept_id IN NUMBER) IS
    CURSOR emp_cursor IS
        SELECT e.employee_id, e.first_name, e.last_name, e.salary, d.department_name
        FROM employees e
        JOIN departments d ON e.department_id = d.department_id
        WHERE e.department_id = p_dept_id
        AND e.salary = (SELECT MAX(salary) FROM employees WHERE department_id = p_dept_id);
    
    v_emp_id NUMBER;
    v_first_name VARCHAR2(50);
    v_last_name VARCHAR2(50);
    v_salary NUMBER(10, 2);
    v_dept_name VARCHAR2(50);
    v_employee_count NUMBER := 0;

BEGIN
    IF p_dept_id IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Invalid department ID.');
        RETURN;
    END IF;

    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_emp_id, v_first_name, v_last_name, v_salary, v_dept_name;
        EXIT WHEN emp_cursor%NOTFOUND;

        v_employee_count := v_employee_count + 1;

        IF v_employee_count = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Top employee: ' || v_first_name || ' ' || v_last_name || 
                                ' ( $'||TO_CHAR(v_salary,'9,999.99')||')');
        END IF;
    END LOOP;

    CLOSE emp_cursor;

    IF v_employee_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No employee works for this department (' || p_dept_id || ')!');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No employees found in department ' || p_dept_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END DEPT_REPORT;

DROP PROCEDURE DEPT_REPORT

8.2
CREATE TABLE WORK_LOG (
    employee_id NUMBER,
    log_time TIMESTAMP
);

DROP TABLE WORK_LOG

CREATE OR REPLACE FUNCTION EMP_WORK_LOG(p_emp_id IN NUMBER) 
RETURN VARCHAR2 IS
    v_log_time TIMESTAMP;
    v_result VARCHAR2(100);
BEGIN
    v_log_time := SYSTIMESTAMP;
    
    INSERT INTO WORK_LOG (employee_id, log_time)
    VALUES (p_emp_id, v_log_time);
    
    v_result := p_emp_id || ' on ' || 
                TO_CHAR(v_log_time, 'DD/MM/YYYY') || ' at ' || 
                TO_CHAR(v_log_time, 'HH:MI AM');
    
    RETURN v_result;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END EMP_WORK_LOG;

--for check
SET SERVEROUTPUT ON;

DECLARE
    v_result VARCHAR2(255);
BEGIN
    v_result := EMP_WORK_LOG(1000);
    DBMS_OUTPUT.PUT_LINE(v_result);
END;




8.3.1
CREATE OR REPLACE PACKAGE hr_pkg AS
    PROCEDURE DEPT_REPORT(p_dept_id IN NUMBER);
    FUNCTION EMP_WORK_LOG(p_emp_id IN NUMBER) RETURN VARCHAR2;
END hr_pkg;

8.3.2
CREATE OR REPLACE PACKAGE BODY hr_pkg AS
    PROCEDURE DEPT_REPORT(p_dept_id IN NUMBER) IS
        v_emp_id NUMBER;
        v_first_name VARCHAR2(50);
        v_last_name VARCHAR2(50);
        v_salary NUMBER;
        v_dept_name VARCHAR2(50);
    BEGIN
        SELECT e.employee_id, e.first_name, e.last_name, e.salary, d.department_name
        INTO v_emp_id, v_first_name, v_last_name, v_salary, v_dept_name
        FROM employees e
        JOIN departments d ON e.department_id = d.department_id
        WHERE e.department_id = p_dept_id
        AND e.salary = (SELECT MAX(salary) FROM employees WHERE department_id = p_dept_id);

        DBMS_OUTPUT.PUT_LINE('Department: ' || v_dept_name);
        DBMS_OUTPUT.PUT_LINE('Employee with highest salary:');
        DBMS_OUTPUT.PUT_LINE('ID: ' || v_emp_id);
        DBMS_OUTPUT.PUT_LINE('Name: ' || v_first_name || ' ' || v_last_name);
        DBMS_OUTPUT.PUT_LINE('Salary: $' || v_salary);

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('No employees found in department ' || p_dept_id);
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
    END DEPT_REPORT;

    FUNCTION EMP_WORK_LOG(p_emp_id IN NUMBER) RETURN VARCHAR2 IS
        v_log_time TIMESTAMP;
        v_result VARCHAR2(100);
    BEGIN
        v_log_time := SYSTIMESTAMP;
        
        INSERT INTO WORK_LOG (employee_id, log_time)
        VALUES (p_emp_id, v_log_time);
        
        v_result := p_emp_id || ' on ' || 
                    TO_CHAR(v_log_time, 'DD/MM/YYYY') || ' at ' || 
                    TO_CHAR(v_log_time, 'HH:MI AM');
        
        RETURN v_result;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'Error: ' || SQLERRM;
    END EMP_WORK_LOG;
END hr_pkg;



-- Check 8.1
BEGIN
    DEPT_REPORT(50);  
END;

execute DEPT_REPORT (50);

execute DEPT_REPORT (270);
-- check 8.2
DECLARE
    v_result VARCHAR2(100);
BEGIN
    v_result := EMP_WORK_LOG(1000);  
    DBMS_OUTPUT.PUT_LINE(v_result);
END;

--check 8.3
BEGIN
    DBMS_OUTPUT.PUT_LINE('Testing DEPT_REPORT:');
    hr_pkg.DEPT_REPORT(50);
    
    DBMS_OUTPUT.PUT_LINE(CHR(10) || 'Testing EMP_WORK_LOG:');
    
    DBMS_OUTPUT.PUT_LINE(hr_pkg.EMP_WORK_LOG(1000));
END;
